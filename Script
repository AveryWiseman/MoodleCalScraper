from selenium import webdriver
from selenium.webdriver.firefox.service import Service
from selenium.webdriver.firefox.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from bs4 import BeautifulSoup
from ics import Calendar, Event
from datetime import datetime
import pandas as pd
import re
import time


# Path to GeckoDriver and Firefox binary
gecko_driver_path = r"" # Add path
firefox_binary_path = r"" # Add path

# Set up the Firefox options and specify the binary location
firefox_options = Options()
firefox_options.binary_location = firefox_binary_path
firefox_options.headless = False  # Set to False to see the browser while debugging

# Set up the Firefox WebDriver
service = Service(gecko_driver_path)
driver = webdriver.Firefox(service=service, options=firefox_options)

# Navigate to the Moodle login page
driver.get('https://vle.rcsi.com/login/index.php')

# Wait for the page to load
time.sleep(3)

# Click on the "RCSI staff & students" button to go to the Microsoft SSO page
sso_button = driver.find_element(By.XPATH, '//a[@href="https://vle.rcsi.com/auth/oidc/"]')
sso_button.click()

# Wait for the Microsoft login page to load
time.sleep(5)

# Now we are on the Microsoft SSO page. Find the email field and enter your RCSI email
email_field = driver.find_element(By.NAME, 'loginfmt')
email_field.send_keys('')  # Enter your email

# Click the "Next" button to proceed
next_button = driver.find_element(By.ID, 'idSIButton9')  # "Next" button on Microsoft login
next_button.click()

# Wait for the password page to load
time.sleep(5)

# Find the password field and enter your password
password_field = driver.find_element(By.NAME, 'passwd')
password_field.send_keys('')  # Enter your password

# Click the "Sign In" button
sign_in_button = driver.find_element(By.ID, 'idSIButton9')  # Same button ID for sign in
sign_in_button.click()

# Add delay to allow redirection and potentially handle MFA
input("Please complete the 2FA process and press Enter to continue...")

# Handle the "Stay signed in?" prompt
try:
    stay_signed_in_button = driver.find_element(By.ID, 'idBtn_Back')
    stay_signed_in_button.click()
except:
    print("No 'Stay signed in?' prompt found.")

# Now the browser should be logged in and redirected to the Moodle dashboard
driver.get('https://vle.rcsi.com/calendar/view.php?view=month')

# Add a delay to ensure the calendar page is fully loaded
time.sleep(5)
print("Calendar page loaded, extracting events...")

events = []

# Find the calendar days
calendar_days = driver.find_elements(By.CLASS_NAME, 'day')

# Set the target group (e.g., Group E)
target_group = "E"

# Define the main extraction process in a function
def extract_month_events():
    # Dictionary to keep track of unique events per day
    processed_events = {}

    # Loop through each day, click it to load events, and scrape the event data
    for index, day_section in enumerate(calendar_days):
        if index == 0:
            # First day: Capture the title after clicking without checking for a change
            day_section.click()  # Click to load the first dayâ€™s events
            new_day_title = driver.find_element(By.ID, 'day-title').text.strip()
            print(f"Processing events for the first day: {new_day_title}")
        else:
            # For subsequent days, capture the current title, click, and then wait for it to change
            initial_day_title = driver.find_element(By.ID, 'day-title').text.strip()
            print(f"Processing events for {initial_day_title}")

            # Click to load events for the next day
            day_section.click()

            # Wait until the day-title changes to confirm new content is loaded
            try:
                WebDriverWait(driver, 2).until(
                    lambda driver: driver.find_element(By.ID, 'day-title').text.strip() != initial_day_title
                )
                new_day_title = driver.find_element(By.ID, 'day-title').text.strip()
                print(f"Day has changed to {new_day_title}")
            except:
                print(f"Day is {new_day_title} and did not advance.")
                continue

        # Reparse the page source after events are loaded
        soup = BeautifulSoup(driver.page_source, 'html.parser')

        # Extract the date for processing
        date_element = soup.find('div', id='day-title')
        date_str = date_element.text.strip() if date_element else "Unknown"

        if date_str in processed_events:
            print(f"Skipping already processed events for {date_str}")
            continue  # Skip if this date was already processed
        processed_events[date_str] = True  # Mark this date as processed

        # Extract event boxes for this day
        event_boxes = soup.find_all('div', class_='col-md-5 event-box no-left-margin')

        # Debug: Check if event boxes are found
        if not event_boxes:
            print("No event boxes found for this day.")
        else:
            print(f"Found {len(event_boxes)} event boxes.")

        # Extract individual events from each box
        for event_box in event_boxes:
            event_items = event_box.find_all('div', class_='event-item')

            # Debug: Check if event items are found within each event box
            if not event_items:
                print("No events found within this event box.")
            else:
                print(f"Found {len(event_items)} events in this event box.")

            for event in event_items:
                time_element = event.find('div', class_='event-time').text.strip()
                name_location = event.find('div', class_='event-name-location').text.strip()

                # Skip "Free Slot" and "Break" events
                if "Free Slot" in name_location or "Break" in name_location:
                    print(f"Skipping event: {name_location}")
                    continue

                # Extract additional fields like tutor, location, notes, and course link
                tutor = event.find('div', class_='event-presenter').text.strip() if event.find('div',
                                                                                               class_='event-presenter') else "N/A"
                location = event.find('div', class_='event-location').text.strip() if event.find('div',
                                                                                                 'event-location') else "N/A"
                notes = event.find('div', class_='event-notes').text.strip() if event.find('div', 'event-notes') else "N/A"
                course_link_element = event.find('div', 'gotocourse').find('a') if event.find('div', 'gotocourse') else None
                course_link = course_link_element['href'] if course_link_element else "N/A"

                # Ensure the event is unique for the day
                event_key = f"{date_str}-{name_location}-{time_element}"
                if event_key in processed_events:
                    print(f"Skipping duplicate event: {event_key}")
                    continue

                # Add the event to processed events
                processed_events[event_key] = True

                # Extract the group information from the notes
                group_info = "Unknown Group"
                if "Group" in notes:
                    group_info = notes.split("Group: ")[-1].strip()

                # Filter only events for "All groups" or for the target group (e.g., Group E)
                if group_info == "All" or group_info == target_group:
                    print(
                        f"Event found: Time: {time_element}, Name/Location: {name_location}, Group: {group_info}, Tutor: {tutor}, Location: {location}, Notes: {notes}, Course Link: {course_link}")
                    events.append({
                        'date': date_str,
                        'time': time_element,
                        'event': name_location,
                        'group': group_info,
                        'tutor': tutor,
                        'location': location,
                        'notes': notes,
                        'course_link': course_link
                    })
# Main loop to repeat for each month
while True:
    # Run the event extraction for the current month
    extract_month_events()

    # Ask the user if they want to continue to the next month
    next_month = input("Do you want to process the next month? (y/n): ").strip().lower()
    if next_month != "y":
        break

    # Click on the "next month" button to go to the next month view
    try:
        next_button = driver.find_element(By.XPATH,
                                          "/html/body/div[3]/div[4]/div[1]/div[2]/div/section/div/div/div/div/div[2]/div/div[1]/div/div/div/div/span/div/a[2]/span")
        next_button.click()
        print("Navigated to the next month.")
        time.sleep(3)  # Pause to allow the next month's calendar to load

        # Refresh calendar_days list after navigating to the next month
        calendar_days = driver.find_elements(By.CLASS_NAME, 'day')

    except:
        print("Could not find the next month button. Ending process.")
        break

# Close the browser after extracting all data
driver.quit()

# Convert the list of events to a pandas DataFrame
df = pd.DataFrame(events)

# Date parsing helper function
def custom_date_parser(date_str):
    try:
        # Remove 'st', 'nd', 'rd', 'th' suffixes from the day part of the date
        cleaned_date_str = re.sub(r'(\d+)(st|nd|rd|th)', r'\1', date_str)
        # Parse the cleaned date string assuming it is in the format: 'DayOfWeek Day Month Year'
        parsed_date = datetime.strptime(cleaned_date_str, '%A %d %b, %Y')
        return parsed_date
    except ValueError:
        print(f"Error parsing date: {date_str}")
        return pd.NaT  # Return NaT for invalid dates

# Apply the custom date parser
df['date'] = df['date'].apply(custom_date_parser)

# Time parsing function
def parse_time(time_str):
    try:
        start_time, end_time = time_str.split('-')
        return start_time.replace('.', ':'), end_time.replace('.', ':')
    except ValueError:
        print(f"Invalid time format: {time_str}")
        return "00:00", "00:00"

# Parse the time column
df['start_time'], df['end_time'] = zip(*df['time'].apply(parse_time))

# Now creating the ICS file
calendar = Calendar()

for index, row in df.iterrows():
    if pd.notna(row['date']):  # Ensure the date is valid
        event = Event()
        event.name = row['event']
        event.begin = f"{row['date'].strftime('%Y-%m-%d')} {row['start_time']}"
        event.end = f"{row['date'].strftime('%Y-%m-%d')} {row['end_time']}"
        event.description = f"Tutor: {row['tutor']}\nLocation: {row['location']}\nNotes: {row['notes']}\nCourse Link: {row['course_link']}"
        calendar.events.add(event)
    else:
        print(f"Skipping event with missing date: {row['event']}")

# Save the calendar to an .ics file
with open('calendar.ics', 'w') as f:
    f.writelines(calendar)

print("ICS file created: calendar.ics")
